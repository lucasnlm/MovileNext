//
// Autogenerated by Natalie - Storyboard Generator Script.
// http://blog.krzyzanowskim.com
//

import UIKit

//MARK: - Storyboards
struct Storyboards {

    struct Main {

        static let identifier = "Main"

        static var storyboard:UIStoryboard {
            return UIStoryboard(name: self.identifier, bundle: nil)
        }

        static func instantiateInitialViewController() -> CustomNavigationController! {
            return self.storyboard.instantiateInitialViewController() as! CustomNavigationController
        }

        static func instantiateViewControllerWithIdentifier(identifier: String) -> UIViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier(identifier) as! UIViewController
        }
    }
}

//MARK: - ReusableKind
enum ReusableKind: String, Printable {
    case TableViewCell = "tableViewCell"
    case CollectionViewCell = "collectionViewCell"

    var description: String { return self.rawValue }
}

//MARK: - SegueKind
enum SegueKind: String, Printable {    
    case Relationship = "relationship" 
    case Show = "show"                 
    case Presentation = "presentation" 
    case Embed = "embed"               
    case Unwind = "unwind"             

    var description: String { return self.rawValue } 
}

//MARK: - SegueProtocol
public protocol IdentifiableProtocol: Equatable {
    var identifier: String? { get }
}

public protocol SegueProtocol: IdentifiableProtocol {
}

public func ==<T: SegueProtocol, U: SegueProtocol>(lhs: T, rhs: U) -> Bool {
   return lhs.identifier == rhs.identifier
}

public func ~=<T: SegueProtocol, U: SegueProtocol>(lhs: T, rhs: U) -> Bool {
   return lhs.identifier == rhs.identifier
}

//MARK: - ReusableProtocol
public protocol ReusableProtocol: IdentifiableProtocol {
    var viewType: UIView.Type? {get}
}

public func ==<T: ReusableProtocol, U: ReusableProtocol>(lhs: T, rhs: U) -> Bool {
   return lhs.identifier == rhs.identifier
}

//MARK: - Protocol Implementation
extension UIStoryboardSegue: SegueProtocol {
}

extension UICollectionReusableView: ReusableProtocol {
    public var viewType: UIView.Type? { return self.dynamicType}
    public var identifier: String? { return self.reuseIdentifier}
}

extension UITableViewCell: ReusableProtocol {
    public var viewType: UIView.Type? { return self.dynamicType}
    public var identifier: String? { return self.reuseIdentifier}
}

//MARK: - UIViewController extension
extension UIViewController {
    func performSegue<T: SegueProtocol>(segue: T, sender: AnyObject?) {
       performSegueWithIdentifier(segue.identifier, sender: sender)
    }
}

//MARK: - UICollectionViewController

extension UICollectionViewController {

    func dequeueReusableCell<T: ReusableProtocol>(reusable: T, forIndexPath: NSIndexPath!) -> AnyObject {
        return self.collectionView!.dequeueReusableCellWithReuseIdentifier(reusable.identifier!, forIndexPath: forIndexPath)
    }

    func registerReusable<T: ReusableProtocol>(reusable: T) {
        if let type = reusable.viewType, identifier = reusable.identifier {
            self.collectionView?.registerClass(type, forCellWithReuseIdentifier: identifier)
        }
    }

    func dequeueReusableSupplementaryViewOfKind<T: ReusableProtocol>(elementKind: String, withReusable reusable: T, forIndexPath: NSIndexPath!) -> AnyObject {
        return self.collectionView!.dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: reusable.identifier!, forIndexPath: forIndexPath)
    }

    func registerReusable<T: ReusableProtocol>(reusable: T, forSupplementaryViewOfKind elementKind: String) {
        if let type = reusable.viewType, identifier = reusable.identifier {
            self.collectionView?.registerClass(type, forSupplementaryViewOfKind: elementKind, withReuseIdentifier: identifier)
        }
    }
}
//MARK: - UITableViewController

extension UITableViewController {

    func dequeueReusableCell<T: ReusableProtocol>(reusable: T, forIndexPath: NSIndexPath!) -> AnyObject {
        return self.tableView!.dequeueReusableCellWithIdentifier(reusable.identifier!, forIndexPath: forIndexPath)
    }

    func registerReusableCell<T: ReusableProtocol>(reusable: T) {
        if let type = reusable.viewType, identifier = reusable.identifier {
            self.tableView?.registerClass(type, forCellReuseIdentifier: identifier)
        }
    }

    func dequeueReusableHeaderFooter<T: ReusableProtocol>(reusable: T) -> AnyObject? {
        if let identifier = reusable.identifier {
            return self.tableView?.dequeueReusableHeaderFooterViewWithIdentifier(identifier)
        }
        return nil
    }

    func registerReusableHeaderFooter<T: ReusableProtocol>(reusable: T) {
        if let type = reusable.viewType, identifier = reusable.identifier {
             self.tableView?.registerClass(type, forHeaderFooterViewReuseIdentifier: identifier)
        }
    }
}

//MARK: - CustomNavigationController

//MARK: - EpisodeViewController

//MARK: - EpisodesListViewController
extension UIStoryboardSegue {
    func selection() -> EpisodesListViewController.Segue? {
        if let identifier = self.identifier {
            return EpisodesListViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension EpisodesListViewController { 

    enum Segue: String, Printable, SegueProtocol {
        case show_to_show = "show_to_show"

        var kind: SegueKind? {
            switch (self) {
            case show_to_show:
                return SegueKind(rawValue: "show")
            default:
                preconditionFailure("Invalid value")
                break
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case show_to_show:
                return EpisodeViewController.self
            default:
                assertionFailure("Unknown destination")
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}
extension EpisodesListViewController { 

    enum Reusable: String, Printable, ReusableProtocol {
        case EpisodeCell = "EpisodeCell"

        var kind: ReusableKind? {
            switch (self) {
            case EpisodeCell:
                return ReusableKind(rawValue: "tableViewCell")
            default:
                preconditionFailure("Invalid value")
                break
            }
        }

        var viewType: UIView.Type? {
            switch (self) {
            case EpisodeCell:
                return EpisodeTableViewCell.self
            default:
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}


//MARK: - ShowDetailsController
extension UIStoryboardSegue {
    func selection() -> ShowDetailsController.Segue? {
        if let identifier = self.identifier {
            return ShowDetailsController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension ShowDetailsController { 

    enum Segue: String, Printable, SegueProtocol {
        case details_to_overview = "details_to_overview"
        case details_to_seasons = "details_to_seasons"
        case details_to_genres = "details_to_genres"
        case details_to_info = "details_to_info"

        var kind: SegueKind? {
            switch (self) {
            case details_to_overview:
                return SegueKind(rawValue: "show")
            case details_to_seasons:
                return SegueKind(rawValue: "show")
            case details_to_genres:
                return SegueKind(rawValue: "show")
            case details_to_info:
                return SegueKind(rawValue: "show")
            default:
                preconditionFailure("Invalid value")
                break
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case details_to_overview:
                return ShowOverviewController.self
            case details_to_seasons:
                return ShowSeasonsController.self
            case details_to_genres:
                return ShowGenresController.self
            case details_to_info:
                return ShowInfoController.self
            default:
                assertionFailure("Unknown destination")
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - ShowOverviewController

//MARK: - ShowSeasonsController
extension UIStoryboardSegue {
    func selection() -> ShowSeasonsController.Segue? {
        if let identifier = self.identifier {
            return ShowSeasonsController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension ShowSeasonsController { 

    enum Segue: String, Printable, SegueProtocol {
        case season_to_episodes = "season_to_episodes"

        var kind: SegueKind? {
            switch (self) {
            case season_to_episodes:
                return SegueKind(rawValue: "show")
            default:
                preconditionFailure("Invalid value")
                break
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case season_to_episodes:
                return EpisodesListViewController.self
            default:
                assertionFailure("Unknown destination")
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}
extension ShowSeasonsController { 

    enum Reusable: String, Printable, ReusableProtocol {
        case ShowSeasonId = "ShowSeasonId"

        var kind: ReusableKind? {
            switch (self) {
            case ShowSeasonId:
                return ReusableKind(rawValue: "tableViewCell")
            default:
                preconditionFailure("Invalid value")
                break
            }
        }

        var viewType: UIView.Type? {
            switch (self) {
            case ShowSeasonId:
                return SeasonTableViewCell.self
            default:
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}


//MARK: - ShowInfoController

//MARK: - ShowGenresController

//MARK: - ShowCollectionViewController
extension UIStoryboardSegue {
    func selection() -> ShowCollectionViewController.Segue? {
        if let identifier = self.identifier {
            return ShowCollectionViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension ShowCollectionViewController { 

    enum Segue: String, Printable, SegueProtocol {
        case shows_to_details = "shows_to_details"

        var kind: SegueKind? {
            switch (self) {
            case shows_to_details:
                return SegueKind(rawValue: "show")
            default:
                preconditionFailure("Invalid value")
                break
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case shows_to_details:
                return ShowDetailsController.self
            default:
                assertionFailure("Unknown destination")
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}
extension ShowCollectionViewController { 

    enum Reusable: String, Printable, ReusableProtocol {
        case ShowCell = "ShowCell"

        var kind: ReusableKind? {
            switch (self) {
            case ShowCell:
                return ReusableKind(rawValue: "collectionViewCell")
            default:
                preconditionFailure("Invalid value")
                break
            }
        }

        var viewType: UIView.Type? {
            switch (self) {
            case ShowCell:
                return SerieCollectionViewCell.self
            default:
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

